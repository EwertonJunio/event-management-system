{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst swaggerUi = require('swagger-ui-express');\nconst swaggerDocument = require('./swagger/swagger.json');\nrequire('dotenv').config();\nconst authRoutes = require('./routes/authRoutes');\nconst eventRoutes = require('./routes/eventRoutes');\nconst participantRoutes = require('./routes/participantRoutes');\nconst app = express();\n\n// Middleware para log de requisições\napp.use((req, res, next) => {\n  console.log(`[${new Date().toLocaleString()}] ${req.method} ${req.path}`);\n  next();\n});\n\n// Middleware para permitir CORS\napp.use(cors());\n\n// Middleware para interpretar JSON\napp.use(express.json());\n\n// Endpoint para documentação Swagger\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\n// Rota de teste para a rota raiz\napp.get('/', (req, res) => {\n  res.send('Servidor está ativo e funcionando!');\n});\n\n// Rotas para endpoints\napp.use('/api/auth', authRoutes);\napp.use('/api/events', eventRoutes);\napp.use('/api/participants', participantRoutes);\nconst PORT = process.env.PORT || 5000;\nconst startServer = async () => {\n  try {\n    await mongoose.connect(process.env.MONGODB_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n    console.log('Conectado ao MongoDB');\n    app.listen(PORT, () => {\n      console.log(`Servidor está ativo e ouvindo na porta ${PORT}`);\n    });\n  } catch (err) {\n    console.error('Erro ao conectar ao MongoDB:', err);\n  }\n};\nstartServer();\nmodule.exports = app; // Exporta o app para testes unitários","map":{"version":3,"names":["express","require","mongoose","cors","swaggerUi","swaggerDocument","config","authRoutes","eventRoutes","participantRoutes","app","use","req","res","next","console","log","Date","toLocaleString","method","path","json","serve","setup","get","send","PORT","process","env","startServer","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","listen","err","error","module","exports"],"sources":["C:/Users/Júnio Santos/Downloads/event_management_system/projeto/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst swaggerUi = require('swagger-ui-express');\nconst swaggerDocument = require('./swagger/swagger.json');\nrequire('dotenv').config();\n\nconst authRoutes = require('./routes/authRoutes');\nconst eventRoutes = require('./routes/eventRoutes');\nconst participantRoutes = require('./routes/participantRoutes');\n\nconst app = express();\n\n// Middleware para log de requisições\napp.use((req, res, next) => {\n    console.log(`[${new Date().toLocaleString()}] ${req.method} ${req.path}`);\n    next();\n});\n\n// Middleware para permitir CORS\napp.use(cors());\n\n// Middleware para interpretar JSON\napp.use(express.json());\n\n// Endpoint para documentação Swagger\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\n// Rota de teste para a rota raiz\napp.get('/', (req, res) => {\n    res.send('Servidor está ativo e funcionando!');\n});\n\n// Rotas para endpoints\napp.use('/api/auth', authRoutes);\napp.use('/api/events', eventRoutes);\napp.use('/api/participants', participantRoutes);\n\nconst PORT = process.env.PORT || 5000;\n\nconst startServer = async() => {\n    try {\n        await mongoose.connect(process.env.MONGODB_URI, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n        });\n        console.log('Conectado ao MongoDB');\n\n        app.listen(PORT, () => {\n            console.log(`Servidor está ativo e ouvindo na porta ${PORT}`);\n        });\n    } catch (err) {\n        console.error('Erro ao conectar ao MongoDB:', err);\n    }\n};\n\nstartServer();\n\nmodule.exports = app; // Exporta o app para testes unitários"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,SAAS,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAC/C,MAAMI,eAAe,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AACzDA,OAAO,CAAC,QAAQ,CAAC,CAACK,MAAM,CAAC,CAAC;AAE1B,MAAMC,UAAU,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMO,WAAW,GAAGP,OAAO,CAAC,sBAAsB,CAAC;AACnD,MAAMQ,iBAAiB,GAAGR,OAAO,CAAC,4BAA4B,CAAC;AAE/D,MAAMS,GAAG,GAAGV,OAAO,CAAC,CAAC;;AAErB;AACAU,GAAG,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACxBC,OAAO,CAACC,GAAG,CAAC,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,KAAKN,GAAG,CAACO,MAAM,IAAIP,GAAG,CAACQ,IAAI,EAAE,CAAC;EACzEN,IAAI,CAAC,CAAC;AACV,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACC,GAAG,CAACR,IAAI,CAAC,CAAC,CAAC;;AAEf;AACAO,GAAG,CAACC,GAAG,CAACX,OAAO,CAACqB,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAX,GAAG,CAACC,GAAG,CAAC,WAAW,EAAEP,SAAS,CAACkB,KAAK,EAAElB,SAAS,CAACmB,KAAK,CAAClB,eAAe,CAAC,CAAC;;AAEvE;AACAK,GAAG,CAACc,GAAG,CAAC,GAAG,EAAE,CAACZ,GAAG,EAAEC,GAAG,KAAK;EACvBA,GAAG,CAACY,IAAI,CAAC,oCAAoC,CAAC;AAClD,CAAC,CAAC;;AAEF;AACAf,GAAG,CAACC,GAAG,CAAC,WAAW,EAAEJ,UAAU,CAAC;AAChCG,GAAG,CAACC,GAAG,CAAC,aAAa,EAAEH,WAAW,CAAC;AACnCE,GAAG,CAACC,GAAG,CAAC,mBAAmB,EAAEF,iBAAiB,CAAC;AAE/C,MAAMiB,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AAErC,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAW;EAC3B,IAAI;IACA,MAAM3B,QAAQ,CAAC4B,OAAO,CAACH,OAAO,CAACC,GAAG,CAACG,WAAW,EAAE;MAC5CC,eAAe,EAAE,IAAI;MACrBC,kBAAkB,EAAE;IACxB,CAAC,CAAC;IACFlB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IAEnCN,GAAG,CAACwB,MAAM,CAACR,IAAI,EAAE,MAAM;MACnBX,OAAO,CAACC,GAAG,CAAC,0CAA0CU,IAAI,EAAE,CAAC;IACjE,CAAC,CAAC;EACN,CAAC,CAAC,OAAOS,GAAG,EAAE;IACVpB,OAAO,CAACqB,KAAK,CAAC,8BAA8B,EAAED,GAAG,CAAC;EACtD;AACJ,CAAC;AAEDN,WAAW,CAAC,CAAC;AAEbQ,MAAM,CAACC,OAAO,GAAG5B,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}